[push]
	default = simple
[credential]
	helper = wincred
[color]
	ui = true
[core]
	autocrlf = input
[alias]
	#
	# Utilities
	#

	# Get your email
	author = config user.email
	# Get the current branch name (used in other aliases)
	branch-name = rev-parse --abbrev-ref HEAD

	#
	# Getting and Creating Projects
	#

	# Initialize your repository and create an empty root commit
	it = "!git init && git commit -m \"root\" --allow-empty"

	#
	# Inspection and Comparison
	#

	# Log commits to the current branch in short format
	# (branch entry) (hash, 7 digits) (commit message header)
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	# Same as `lol` but for all branches
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	# Same as `lola` but also shows the discarded commits
	lolr = "!git lola $(git reflog | cut -c1-7)"
	# Log all your commits in short form with date
	recap = "!git log --author=$(git author) --oneline --no-merges --format='%h [%ad] %s' --date=short"
	# Log all your commits for today in short form with relative date
	today = "!git log --author=$(git author) --oneline --no-merges --format='%h [%ad] %s' --date=relative --since=1am"
	# Same as `git today` (equals `git daysago 0`) but for a specific day from current day
	daysago = "!f() { COUNT=${1:-\"2\"} && git recap --until=$COUNT.day --since=$((++COUNT)).day; }; f"
	# Same as `git today` (equals `git daysago 0`) but for a specific day from current day
	shorty = status --short --branch

	#
	# Branching and Merging
	#

	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push -u origin $(git branch-name)"
	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"
	# Log commits to the current branch in short format
	# (branch entry) (hash, 7 digits) (commit message header)
	please = push --force-with-lease
	# Delete a branch and recreate it from master â€” useful if you have, dev
	# and a master branch and they could conceivably go out of sync
	recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"
	# Checkout another branch (master by default) and remove the branch
	# you was previously on. Can't remove master or the current branch.
	return = "!f() { PREV=$(git branch-name) && CURR=${1:-\"master\"} && if [[ $PREV == \"master\" ]]; then echo \"Can't remove 'master' branch.\"; elif [[ $PREV == $CURR ]]; then echo \"Already on '$PREV'.\"; else git checkout \"$CURR\" && git del \"$PREV\"; fi }; f"
	# Force delete branch
	del = branch -D
	# Create new branch from current and switch to it
	new = checkout -b
	# Update previous commit with staged changes
	gud = commit --amend --no-edit
	# Same as `gud`, but also edit the commit message
	commend = commit --amend
	# Update and rebase previous commits. First argument is the number of commits (2 by default)
	rework = "!f() { COUNT=${1:-\"2\"} && git rebase -i HEAD~$COUNT; }; f"
	# Stash only unstaged changes to tracked files
	stash0 = stash --keep-index
	# Stash tracked files (default)
	stash1 = stash
	# Stash untracked and tracked files
	stash2 = stash --include-untracked
	# Stash ignored, untracked, and tracked files
	stash3 = stash --all

	#
	# Basic Snapshotting
	#

	# Unstage any files that have been added to the staging area
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached
