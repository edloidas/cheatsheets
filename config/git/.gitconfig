[push]
	default = simple
[credential]
	helper = wincred
[color]
	ui = true
[core]
	autocrlf = input
[alias]
	#
	# Utilities
	#

	# Get your email
	author = config user.email
	# Get the current branch name (used in other aliases)
	branch-name = rev-parse --abbrev-ref HEAD
	# Get hash of the last common commit with master branch
	base = merge-base master HEAD
	# Given a merge commit, find the span of commits that exist(ed) on that branch
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	#
	# Getting and Creating Projects
	#

	# Initialize your repository and create an empty root commit
	it = "!git init && git commit -m \"root\" --allow-empty"
	# Create a new branch with no parents and remove all files, except ignored ones
	# Useful when creating branch for documentation and publishing as `gh-pages`
	orphan = "!f() { NAME=${1:-\"orphan\"} && git checkout --orphan $NAME && git rm --cached -r . && git add .gitignore && git clean -fd; }; f"
	# Create a shallow clone with a history truncated to 1 commit
	sclone = clone --depth 1

	#
	# Inspection and Comparison
	#

	# Log commits to the current branch in short format
	# `--oneline` replaces `--pretty=oneline --abbrev-commit`
	lol = log --graph --decorate --oneline --format='%C(Yellow)%h%Creset %s %C(Cyan)(%cr)%Creset %C(Magenta)<%an>%Creset'
	# Same as `lol` but for all branches
	lola = "!git lol --all"
	# Same as `lola` but also shows the discarded commits
	lolr = "!git lola $(git reflog | cut -c1-7)"
	# Log all your commits in short form with date
	recap = "!git log --author=$(git author) --oneline --no-merges --format='%C(Yellow)%h%Creset %C(Cyan)[%ad]%Creset %s' --date=short"
	# Log all your commits for today in short form with relative date
	today = "!git log --author=$(git author) --oneline --no-merges --format='%C(Yellow)%h%Creset %C(Cyan)[%ad]%Creset %s' --date=relative --since=1am"
	# Same as `git today` (equivalent is `git daysago 0`) but for a specific day
	# (1 day ago by default) from current day.
	daysago = "!f() { COUNT=${1:-\"1\"} && git recap --until=$COUNT.day --since=$((++COUNT)).day; }; f"
	# Parsable, machine-readable `git status`
	shorty = status --short --branch
	# Shortened `git status`
	s = status

	#
	# Branching and Merging
	#

	# Push the current branch to the remote "origin"and set it to track the upstream branch
	publish = "!git push -u origin $(git branch-name)"
	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"
	# Forcefully update a remote ref only if upstream ref is what we expect, i.e.
	# nobody has updated the branch upstream
	please = push --force-with-lease
	# Delete a branch and recreate it from master â€” useful if you have, dev
	# and a master branch and they could conceivably go out of sync
	recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"
	# Checkout another branch (master by default) and remove the branch
	# you was previously on. Can't remove master or the current branch.
	return = "!f() { PREV=$(git branch-name) && CURR=${1:-\"master\"} && if [[ $PREV == \"master\" ]]; then echo \"Can't remove 'master' branch.\"; elif [[ $PREV == $CURR ]]; then echo \"Already on '$PREV'.\"; else git checkout \"$CURR\" && git del \"$PREV\"; fi }; f"
	# Force delete branch
	del = branch -D
	# Create new branch from current and switch to it
	new = checkout -b
	# Add all and commit with message
	c = commit -am
	# Update previous commit with staged changes
	gud = commit --amend --no-edit
	# Same as `gud`, but also edit the commit message
	commend = commit --amend
	# Update and rebase previous commits. First argument is the number of commits (2 by default)
	rework = "!f() { COUNT=${1:-\"2\"} && git rebase -i HEAD~$COUNT; }; f"
	# Interactively rebase all the commits on the current branch
	rework-branch = "!git rebase -i $(git base)"
	# Stash only unstaged changes to tracked files
	stash0 = stash --keep-index
	# Stash tracked files (default)
	stash1 = stash
	# Stash untracked and tracked files
	stash2 = stash --include-untracked
	# Stash ignored, untracked, and tracked files
	stash3 = stash --all
	# Switch to previously active branch
	back = checkout -
	# Find the commits that were introduced by a merge
	merge-log = "!git lol $(git merge-span .. $1)"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff $(git merge-span ... $1)"

	#
	# Basic Snapshotting
	#

	# Unstage any files that have been added to the staging area
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached
	# Show list of changed files
	diffn = diff --name-only
	# Show list of changed files that differ from "origin/master"
	diffm = diff --name-only origin/master
	# Highlight modified symbols, not lines
	# Useful for minified files, since they are usually one-liners
	diffmin = diff --word-diff-regex=.
	# Highlight modified symbols using only colors
	# Similar to `diffmin`, but has color flag `--word-diff=color --word-diff-regex=.`
	diffminc = diff --color-words=.

	#
	# Plumbing Commands
	#

	# Stop tracking the file changes: `git hide <filename>`
	hide = update-index --assume-unchanged
	# Resume tracking the file changes: `git unhide <filename>`
	unhide = update-index --no-assume-unchanged
	# Resume tracking all the hidden files
	# Won't resume tracking the files, that wasn't modified but was hidden
	unhide-all = update-index --really-refresh
	# Show list of hidden files
	hidden = "!git ls-files -v | grep '^[[:lower:]]'"
	# Show list of ignored files files
	ignored = "!git status -s --ignored | grep '^!!'"
